; #include <WiFi.h>                // üì∂ ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
; #include <HTTPClient.h>          // üåê ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á HTTP requests
; #include <ArduinoJson.h>         // üì¶ ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ JSON
; #include <DHT.h>                 // üå°Ô∏è ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DHT ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
; #include "HX711.h"               // ‚öñÔ∏è ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö load cell (HX711)

; // üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
; #define DHTPIN1 26               // ‡∏û‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á DHT ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1
; #define DHTPIN2 25               // ‡∏û‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á DHT ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 2
; #define DHTTYPE DHT21            // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á DHT ‡∏Ñ‡∏∑‡∏≠ DHT21

; #define DOUT_PIN 4               // ‡∏û‡∏¥‡∏ô DOUT ‡∏Ç‡∏≠‡∏á HX711
; #define SCK_PIN  2               // ‡∏û‡∏¥‡∏ô SCK ‡∏Ç‡∏≠‡∏á HX711 

; // üîß ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
; DHT dht1(DHTPIN1, DHTTYPE);
; DHT dht2(DHTPIN2, DHTTYPE);
; HX711 scale(DOUT_PIN, SCK_PIN); 

; // üåê ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ WiFi SSID ‡πÅ‡∏•‡∏∞ Password 
; const char* ssid = "OPPOA15";         
; const char* password = "11568900";    

; // üåç URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server (‡πÄ‡∏ä‡πà‡∏ô Node.js API)
; const char* serverName = "http://192.168.43.92:3000/api/data";

; #define SAMPLE_COUNT 10         // üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á

; // üì¶ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
; float tempData[SAMPLE_COUNT];  
; float humData[SAMPLE_COUNT];   
; int sampleIndex = 0;            // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö

; void setup() {
;     Serial.begin(115200);       // ‡πÄ‡∏£‡∏¥‡πà‡∏° Serial Monitor
;     dht1.begin();               // ‡πÄ‡∏£‡∏¥‡πà‡∏° DHT1
;     dht2.begin();               // ‡πÄ‡∏£‡∏¥‡πà‡∏° DHT2

;     scale.set_scale(56.4);      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô load cell (‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á)
;     scale.tare();               // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå

;     // üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
;     WiFi.begin(ssid, password);
;     while (WiFi.status() != WL_CONNECTED) {
;         delay(1000);
;         Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi...");
;     }
;     Serial.println("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
; }

; void loop() {
;     // üß™ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏à‡∏≤‡∏Å DHT ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß
;     float humidity1 = dht1.readHumidity();
;     float temperature1 = dht1.readTemperature();
;     float humidity2 = dht2.readHumidity();
;     float temperature2 = dht2.readTemperature();

;     // ‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
;     if (isnan(humidity1) || isnan(temperature1) || isnan(humidity2) || isnan(temperature2)) {
;         Serial.println("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å DHT21");
;         return;
;     }

;     // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
;     float avgTemperature = (temperature1 + temperature2) / 2.0;
;     float avgHumidity = (humidity1 + humidity2) / 2.0;

;     // üîç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Serial Monitor
;     Serial.println("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå:");
;     Serial.print("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 1: "); Serial.print(temperature1); Serial.println(" ¬∞C");
;     Serial.print("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 2: "); Serial.print(temperature2); Serial.println(" ¬∞C");
;     Serial.print("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô 1: "); Serial.print(humidity1); Serial.println(" %");
;     Serial.print("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô 2: "); Serial.print(humidity2); Serial.println(" %");
;     Serial.print("üìä ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: "); Serial.print(avgTemperature); Serial.println(" ¬∞C");
;     Serial.print("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: "); Serial.print(avgHumidity); Serial.println(" %");

;     float weight = abs(scale.get_units(5));  // ‚öñÔ∏è ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å load cell
;     Serial.print("‚öñÔ∏è ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (load cell): ");
;     Serial.print(weight);
;     Serial.println(" ‡∏Å‡∏£‡∏±‡∏° (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)");

;     // üíæ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
;     tempData[sampleIndex] = avgTemperature;
;     humData[sampleIndex] = avgHumidity;
    
;     sampleIndex++;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö

;     Serial.print("üìå ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà: ");
;     Serial.println(sampleIndex);

;     // üì§ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server
;     if (sampleIndex >= SAMPLE_COUNT) {
;         float finalTemp = calculateAverage(tempData, SAMPLE_COUNT);
;         float finalHum = calculateAverage(humData, SAMPLE_COUNT);
;         float weight = abs(scale.get_units(5));  // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á Load Cell

;         sendDataToServer(finalTemp, finalHum, weight);  // üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
;         sampleIndex = 0;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö 
;     }

;     Serial.println("--------------------------");
;     delay(6000);  // ‚è±Ô∏è ‡∏£‡∏≠ 6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á = 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
; }

; // üìò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
; float calculateAverage(float data[], int size) {
;     float sum = 0;
;     for (int i = 0; i < size; i++) {
;         sum += data[i];
;     }
;     return sum / size;
; }

; // üåê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server ‡∏ú‡πà‡∏≤‡∏ô HTTP POST
; void sendDataToServer(float temperature, float humidity, float weight) {
;     if (WiFi.status() == WL_CONNECTED) {
;         HTTPClient http;

;         http.begin(serverName);                         // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API
;         http.addHeader("Content-Type", "application/json");  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Content-Type ‡πÄ‡∏õ‡πá‡∏ô JSON
;         http.setTimeout(5000);                          // ‡∏ï‡∏±‡πâ‡∏á timeout 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ 

;         StaticJsonDocument<200> doc;                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON document
;         doc["temperature"] = temperature;
;         doc["humidity"] = humidity;
;         doc["LightIntensity"] = 300;                    // üåû ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
;         doc["weight"] = weight;

;         String jsonPayload;
;         serializeJson(doc, jsonPayload);                // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô string

;         int httpResponseCode = http.POST(jsonPayload);  // ‡∏™‡πà‡∏á POST request

;         // üì© ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
;         if (httpResponseCode > 0) {
;             String response = http.getString();
;             Serial.println("Response: " + response);
;         } else {
;             Serial.print("Error in POST request: ");
;             Serial.println(http.errorToString(httpResponseCode));
;         }

;         http.end();  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
;     }
; }
